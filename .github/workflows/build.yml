name: Build

on:
  # Run on pushes to main and pushed tags, and on pull requests against main, but ignore the docs folder
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-client:
    name: "PhotonClient Build"
    defaults:
      run:
        working-directory: photon-client
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Dependencies
        run: npm ci
      - name: Build Production Client
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: built-client
          path: photon-client/dist/
  build-offline-docs:
    name: "Build Offline Docs"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install graphviz
        run: |
          sudo apt-get update
          sudo apt-get -y install graphviz
      - name: Install dependencies
        working-directory: docs
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx_rtd_theme sphinx-tabs sphinxext-opengraph doc8
          pip install -r requirements.txt
      - name: Build the docs
        working-directory: docs
        run: |
          make html
      - uses: actions/upload-artifact@v4
        with:
          name: built-docs
          path: docs/build/html

  build-package:
    needs: [build-client, build-offline-docs]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact-name: Win64
            architecture: x64
            arch-override: winx64
          - os: macos-latest
            artifact-name: macOS
            architecture: x64
            arch-override: macx64
          - os: macos-latest
            artifact-name: macOSArm
            architecture: x64
            arch-override: macarm64
          - os: ubuntu-22.04
            artifact-name: Linux
            architecture: x64
            arch-override: linuxx64
          - os: ubuntu-22.04
            artifact-name: LinuxArm64
            architecture: x64
            arch-override: linuxarm64

    runs-on: ${{ matrix.os }}
    name: "Build fat JAR - ${{ matrix.artifact-name }}"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          architecture: ${{ matrix.architecture }}
      - name: Install Arm64 Toolchain
        run: ./gradlew installArm64Toolchain
        if: ${{ (matrix.artifact-name) == 'LinuxArm64' }}
      - run: |
          rm -rf photon-server/src/main/resources/web/*
          mkdir -p photon-server/src/main/resources/web/docs
        if: ${{ (matrix.os) != 'windows-latest' }}
      - run: |
          del photon-server\src\main\resources\web\*.*
          mkdir photon-server\src\main\resources\web\docs
        if: ${{ (matrix.os) == 'windows-latest' }}
      - uses: actions/download-artifact@v4
        with:
          name: built-client
          path: photon-server/src/main/resources/web/
      - uses: actions/download-artifact@v4
        with:
          name: built-docs
          path: photon-server/src/main/resources/web/docs
      - run: ./gradlew photon-server:shadowJar -PArchOverride=${{ matrix.arch-override }}
        if: ${{ (matrix.arch-override != 'none') }}
      - run: ./gradlew photon-server:shadowJar
        if: ${{ (matrix.arch-override == 'none') }}
      - uses: actions/upload-artifact@v4
        with:
          name: jar-${{ matrix.artifact-name }}
          path: photon-server/build/libs
  run-smoketest-native:
    needs: [build-package]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            artifact-name: jar-Linux
            extraOpts: -Djdk.lang.Process.launchMechanism=vfork
          - os: windows-latest
            artifact-name: jar-Win64
            extraOpts: ""
          - os: macos-latest
            artifact-name: jar-macOS
            architecture: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
      # On linux, install mrcal packages
      - run: |
          sudo apt-get update
          sudo apt-get install --yes libcholmod3 liblapack3 libsuitesparseconfig5
        if: ${{ (matrix.os) == 'ubuntu-22.04' }}
      # and actually run the jar
      - run: java -jar ${{ matrix.extraOpts }} *.jar --smoketest
        if: ${{ (matrix.os) != 'windows-latest' }}
      - run: ls *.jar | %{ Write-Host "Running $($_.Name)"; Start-Process "java" -ArgumentList "-jar `"$($_.FullName)`" --smoketest" -NoNewWindow -Wait; break }
        if: ${{ (matrix.os) == 'windows-latest' }}

  run-smoketest-chroot:
    needs: [build-package]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            artifact-name: LinuxArm64
            image_suffix: RaspberryPi
            image_url: https://github.com/PhotonVision/photon-image-modifier/releases/download/v2025.0.3/photonvision_raspi.img.xz
            cpu: cortex-a7
            image_additional_mb: 0
            extraOpts: -Djdk.lang.Process.launchMechanism=vfork

    runs-on: ${{ matrix.os }}
    name: smoketest-${{ matrix.image_suffix }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jar-${{ matrix.artifact-name }}

      - uses: pguyot/arm-runner-action@v2
        name: Run photon smoketest
        id: generate_image
        with:
          base_image: ${{ matrix.image_url }}
          image_additional_mb: ${{ matrix.image_additional_mb }}
          optimize_image: yes
          cpu: ${{ matrix.cpu }}
          # We do _not_ wanna copy photon into the image. Bind mount instead
          bind_mount_repository: true
          # our image better have java installed already
          commands: |
            java -jar ${{ matrix.extraOpts }} *.jar --smoketest

  release:
    needs: [build-package]
    runs-on: ubuntu-22.04
    steps:
      # Download all fat JARs
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: jar-*

      - run: find . -name "*.jar"

      # Push to dev release
      - uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'Dev'
          rm: true
          files: |
            **/*.jar
        if: github.event_name == 'push'

      # Upload all jars to tagged release
      - uses: softprops/action-gh-release@v2.0.9
        with:
          files: |
            **/*.jar
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
